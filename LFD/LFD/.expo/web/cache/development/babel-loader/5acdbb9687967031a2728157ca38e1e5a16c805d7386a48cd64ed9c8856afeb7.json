{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.omitZero = exports.computeNewIndexWhenDataChanges = void 0;\nvar _worklet_2585996741034_init_data = {\n  code: \"function omitZero(a, b) {\\n  if (a === 0) return 0;\\n  return b;\\n}\",\n  location: \"/home/runner/work/react-native-reanimated-carousel/react-native-reanimated-carousel/src/hooks/computeNewIndexWhenDataChanges.ts\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"omitZero\\\",\\\"a\\\",\\\"b\\\"],\\\"sources\\\":[\\\"/home/runner/work/react-native-reanimated-carousel/react-native-reanimated-carousel/src/hooks/computeNewIndexWhenDataChanges.ts\\\"],\\\"mappings\\\":\\\"AAAO,SAAAA,QAASA,CAASC,CAAC,EAAQC,CAAG,EAAQ;EAE3C,IAAID,CAAC,KAAK,CAAC,EACT,OAAO,CAAC;EAEV,OAAOC,CAAC;AACV\\\"}\"\n};\nvar omitZero = function () {\n  var _e = [new global.Error(), 1, -27];\n  var _f = function _f(a, b) {\n    if (a === 0) return 0;\n    return b;\n  };\n  _f._closure = {};\n  _f.__initData = _worklet_2585996741034_init_data;\n  _f.__workletHash = 2585996741034;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nexports.omitZero = omitZero;\nvar _worklet_1218774587822_init_data = {\n  code: \"function computeNewIndexWhenDataChanges(params) {\\n  const {\\n    omitZero\\n  } = this._closure;\\n  const {\\n    direction: direction,\\n    handlerOffset: _handlerOffset,\\n    size: size,\\n    previousLength: previousLength,\\n    currentLength: currentLength\\n  } = params;\\n  let handlerOffset = _handlerOffset;\\n  let positionIndex;\\n  let round;\\n  const isPositive = direction < 0;\\n  if (isPositive) {\\n    positionIndex = Math.abs(handlerOffset) / size;\\n    round = parseInt(String(omitZero(previousLength, positionIndex / previousLength)));\\n  } else {\\n    positionIndex = (Math.abs(handlerOffset) - size) / size;\\n    round = parseInt(String(omitZero(previousLength, positionIndex / previousLength))) + 1;\\n  }\\n  const prevOffset = omitZero(previousLength, positionIndex % previousLength);\\n  const prevIndex = isPositive ? prevOffset : previousLength - prevOffset - 1;\\n  const changedLength = round * (currentLength - previousLength);\\n  const changedOffset = changedLength * size;\\n  if (prevIndex > currentLength - 1 && currentLength < previousLength) {\\n    if (isPositive) handlerOffset = (currentLength - 1) * size * direction;else handlerOffset = (currentLength - 1) * size * -1;\\n  } else {\\n    handlerOffset += changedOffset * direction;\\n  }\\n  return handlerOffset;\\n}\",\n  location: \"/home/runner/work/react-native-reanimated-carousel/react-native-reanimated-carousel/src/hooks/computeNewIndexWhenDataChanges.ts\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"computeNewIndexWhenDataChanges\\\",\\\"params\\\",\\\"omitZero\\\",\\\"_closure\\\",\\\"direction\\\",\\\"handlerOffset\\\",\\\"_handlerOffset\\\",\\\"size\\\",\\\"previousLength\\\",\\\"currentLength\\\",\\\"positionIndex\\\",\\\"round\\\",\\\"isPositive\\\",\\\"Math\\\",\\\"abs\\\",\\\"parseInt\\\",\\\"String\\\",\\\"prevOffset\\\",\\\"prevIndex\\\",\\\"changedLength\\\",\\\"changedOffset\\\"],\\\"sources\\\":[\\\"/home/runner/work/react-native-reanimated-carousel/react-native-reanimated-carousel/src/hooks/computeNewIndexWhenDataChanges.ts\\\"],\\\"mappings\\\":\\\"AAQO,SAAAA,8BAASA,CAA+BC,MAAA,EAM9C;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAEC,MAAM;IAAEC,SAAS,EAATA,SAAS;IAAEC,aAAa,EAAEC,cAAc;IAAEC,IAAI,EAAJA,IAAI;IAAEC,cAAc,EAAdA,cAAc;IAAEC,aAAA,EAAAA;EAAc,CAAC,GAAGR,MAAM;EAEhG,IAAII,aAAa,GAAGC,cAAc;EAClC,IAAII,aAAa;EACjB,IAAIC,KAAK;EAET,MAAMC,UAAU,GAAGR,SAAS,GAAG,CAAC;EAEhC,IAAIQ,UAAU,EAAE;IACdF,aAAa,GAAIG,IAAI,CAACC,GAAG,CAACT,aAAa,CAAC,GAAIE,IAAI;IAChDI,KAAK,GAAGI,QAAQ,CAACC,MAAM,CAACd,QAAQ,CAACM,cAAc,EAAEE,aAAa,GAAGF,cAAc,CAAC,CAAC,CAAC;EACpF,CAAC,MACI;IACHE,aAAa,GAAG,CAACG,IAAI,CAACC,GAAG,CAACT,aAAa,CAAC,GAAGE,IAAI,IAAIA,IAAI;IACvDI,KAAK,GAAGI,QAAQ,CAACC,MAAM,CAACd,QAAQ,CAACM,cAAc,EAAEE,aAAa,GAAGF,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC;EACxF;EAEA,MAAMS,UAAU,GAAGf,QAAQ,CAACM,cAAc,EAAEE,aAAa,GAAGF,cAAc,CAAC;EAC3E,MAAMU,SAAS,GAAGN,UAAU,GAAGK,UAAU,GAAGT,cAAc,GAAGS,UAAU,GAAG,CAAC;EAC3E,MAAME,aAAa,GAAGR,KAAK,IAAIF,aAAa,GAAGD,cAAc,CAAC;EAC9D,MAAMY,aAAa,GAAGD,aAAa,GAAGZ,IAAI;EAC1C,IAAIW,SAAS,GAAGT,aAAa,GAAG,CAAC,IAAIA,aAAa,GAAGD,cAAc,EAAE;IACnE,IAAII,UAAU,EACZP,aAAa,GAAG,CAACI,aAAa,GAAG,CAAC,IAAIF,IAAI,GAAGH,SAAS,CAAC,KAGvDC,aAAa,GAAG,CAACI,aAAa,GAAG,CAAC,IAAIF,IAAI,GAAG,CAAC,CAAC;EACnD,CAAC,MACI;IACHF,aAAa,IAAIe,aAAa,GAAGhB,SAAS;EAC5C;EAEA,OAAOC,aAAa;AACtB\\\"}\"\n};\nvar computeNewIndexWhenDataChanges = function () {\n  var _e = [new global.Error(), -2, -27];\n  var _f = function _f(params) {\n    var direction = params.direction,\n      _handlerOffset = params.handlerOffset,\n      size = params.size,\n      previousLength = params.previousLength,\n      currentLength = params.currentLength;\n    var handlerOffset = _handlerOffset;\n    var positionIndex;\n    var round;\n    var isPositive = direction < 0;\n    if (isPositive) {\n      positionIndex = Math.abs(handlerOffset) / size;\n      round = parseInt(String(omitZero(previousLength, positionIndex / previousLength)));\n    } else {\n      positionIndex = (Math.abs(handlerOffset) - size) / size;\n      round = parseInt(String(omitZero(previousLength, positionIndex / previousLength))) + 1;\n    }\n    var prevOffset = omitZero(previousLength, positionIndex % previousLength);\n    var prevIndex = isPositive ? prevOffset : previousLength - prevOffset - 1;\n    var changedLength = round * (currentLength - previousLength);\n    var changedOffset = changedLength * size;\n    if (prevIndex > currentLength - 1 && currentLength < previousLength) {\n      if (isPositive) handlerOffset = (currentLength - 1) * size * direction;else handlerOffset = (currentLength - 1) * size * -1;\n    } else {\n      handlerOffset += changedOffset * direction;\n    }\n    return handlerOffset;\n  };\n  _f._closure = {\n    omitZero: omitZero\n  };\n  _f.__initData = _worklet_1218774587822_init_data;\n  _f.__workletHash = 1218774587822;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nexports.computeNewIndexWhenDataChanges = computeNewIndexWhenDataChanges;","map":{"version":3,"names":["omitZero","a","b","computeNewIndexWhenDataChanges","params","direction","_handlerOffset","handlerOffset","size","previousLength","currentLength","positionIndex","round","isPositive","Math","abs","parseInt","String","prevOffset","prevIndex","changedLength","changedOffset"],"sources":["C:\\Users\\user\\Desktop\\projet perso\\La Fons'Dal\\LFD\\LFD\\node_modules\\react-native-reanimated-carousel\\lib\\commonjs\\hooks\\computeNewIndexWhenDataChanges.ts"],"sourcesContent":["export function omitZero(a: number, b: number) {\n  \"worklet\";\n  if (a === 0)\n    return 0;\n\n  return b;\n}\n\nexport function computeNewIndexWhenDataChanges(params: {\n  direction: number\n  handlerOffset: number\n  size: number\n  previousLength: number\n  currentLength: number\n}) {\n  \"worklet\";\n  const { direction, handlerOffset: _handlerOffset, size, previousLength, currentLength } = params;\n\n  let handlerOffset = _handlerOffset;\n  let positionIndex;\n  let round;\n\n  const isPositive = direction < 0;\n\n  if (isPositive) {\n    positionIndex = (Math.abs(handlerOffset)) / size;\n    round = parseInt(String(omitZero(previousLength, positionIndex / previousLength)));\n  }\n  else {\n    positionIndex = (Math.abs(handlerOffset) - size) / size;\n    round = parseInt(String(omitZero(previousLength, positionIndex / previousLength))) + 1;\n  }\n\n  const prevOffset = omitZero(previousLength, positionIndex % previousLength);\n  const prevIndex = isPositive ? prevOffset : previousLength - prevOffset - 1;\n  const changedLength = round * (currentLength - previousLength);\n  const changedOffset = changedLength * size;\n  if (prevIndex > currentLength - 1 && currentLength < previousLength) {\n    if (isPositive)\n      handlerOffset = (currentLength - 1) * size * direction;\n\n    else\n      handlerOffset = (currentLength - 1) * size * -1;\n  }\n  else {\n    handlerOffset += changedOffset * direction;\n  }\n\n  return handlerOffset;\n}\n\n"],"mappings":";;;;;;;;;IAAgBA,Q;;uBAASC,C,EAAWC,C,EAAW;IAE7C,IAAID,CAAC,KAAK,CAAV,EACE,OAAO,CAAP;IAEF,OAAOC,CAAP;EACD,C;;;;;;;;;;;;;;IAEeC,8B;;uBAA+BC,M,EAM5C;IAED,IAAQC,SAAR,GAA0FD,MAA1F,CAAQC,SAAR;MAAkCC,cAAlC,GAA0FF,MAA1F,CAAmBG,aAAnB;MAAkDC,IAAlD,GAA0FJ,MAA1F,CAAkDI,IAAlD;MAAwDC,cAAxD,GAA0FL,MAA1F,CAAwDK,cAAxD;MAAwEC,aAAxE,GAA0FN,MAA1F,CAAwEM,aAAxE;IAEA,IAAIH,aAAa,GAAGD,cAApB;IACA,IAAIK,aAAJ;IACA,IAAIC,KAAJ;IAEA,IAAMC,UAAU,GAAGR,SAAS,GAAG,CAA/B;IAEA,IAAIQ,UAAJ,EAAgB;MACdF,aAAa,GAAIG,IAAI,CAACC,GAAL,CAASR,aAAT,CAAD,GAA4BC,IAA5C;MACAI,KAAK,GAAGI,QAAQ,CAACC,MAAM,CAACjB,QAAQ,CAACS,cAAD,EAAiBE,aAAa,GAAGF,cAAjC,CAAT,CAAP,CAAhB;IACD,CAHD,MAIK;MACHE,aAAa,GAAG,CAACG,IAAI,CAACC,GAAL,CAASR,aAAT,IAA0BC,IAA3B,IAAmCA,IAAnD;MACAI,KAAK,GAAGI,QAAQ,CAACC,MAAM,CAACjB,QAAQ,CAACS,cAAD,EAAiBE,aAAa,GAAGF,cAAjC,CAAT,CAAP,CAAR,GAA6E,CAArF;IACD;IAED,IAAMS,UAAU,GAAGlB,QAAQ,CAACS,cAAD,EAAiBE,aAAa,GAAGF,cAAjC,CAA3B;IACA,IAAMU,SAAS,GAAGN,UAAU,GAAGK,UAAH,GAAgBT,cAAc,GAAGS,UAAjB,GAA8B,CAA1E;IACA,IAAME,aAAa,GAAGR,KAAK,IAAIF,aAAa,GAAGD,cAApB,CAA3B;IACA,IAAMY,aAAa,GAAGD,aAAa,GAAGZ,IAAtC;IACA,IAAIW,SAAS,GAAGT,aAAa,GAAG,CAA5B,IAAiCA,aAAa,GAAGD,cAArD,EAAqE;MACnE,IAAII,UAAJ,EACEN,aAAa,GAAG,CAACG,aAAa,GAAG,CAAjB,IAAsBF,IAAtB,GAA6BH,SAA7C,CADF,KAIEE,aAAa,GAAG,CAACG,aAAa,GAAG,CAAjB,IAAsBF,IAAtB,GAA6B,CAAC,CAA9C;IACH,CAND,MAOK;MACHD,aAAa,IAAIc,aAAa,GAAGhB,SAAjC;IACD;IAED,OAAOE,aAAP;EACD,C;;cAxBoBP"},"metadata":{},"sourceType":"script","externalDependencies":[]}