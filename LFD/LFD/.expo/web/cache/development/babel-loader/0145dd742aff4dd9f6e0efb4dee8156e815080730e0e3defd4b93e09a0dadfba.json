{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onPressOut\", \"onPressIn\", \"delayLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"rippleColor\", \"showSelectedOverlay\", \"showSelectedCheck\", \"ellipsizeMode\", \"compact\", \"elevated\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport { getChipColors } from './helpers';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nconst Chip = _ref => {\n  let {\n      mode = 'flat',\n      children,\n      icon,\n      avatar,\n      selected = false,\n      disabled = false,\n      accessibilityLabel,\n      closeIconAccessibilityLabel = 'Close',\n      onPress,\n      onLongPress,\n      onPressOut,\n      onPressIn,\n      delayLongPress,\n      onClose,\n      closeIcon,\n      textStyle,\n      style,\n      theme: themeOverrides,\n      testID = 'chip',\n      selectedColor,\n      rippleColor: customRippleColor,\n      showSelectedOverlay = false,\n      showSelectedCheck = true,\n      ellipsizeMode,\n      compact,\n      elevated = false\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    isV3\n  } = theme;\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(isV3 && elevated ? 1 : 0));\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut\n  });\n  const isOutlined = mode === 'outlined';\n  const handlePressIn = useLatestCallback(e => {\n    const {\n      scale\n    } = theme.animation;\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  });\n  const handlePressOut = useLatestCallback(e => {\n    const {\n      scale\n    } = theme.animation;\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  });\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius\n  } = StyleSheet.flatten(style) || {};\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    rippleColor,\n    selectedBackgroundColor,\n    backgroundColor\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n    customRippleColor\n  });\n  const accessibilityState = {\n    selected,\n    disabled\n  };\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected && showSelectedCheck ? 4 * multiplier : 8 * multiplier\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  const labelTextStyle = Object.assign({\n    color: textColor\n  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);\n  return React.createElement(Surface, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor,\n      borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest, {\n    testID: `${testID}-container`,\n    theme: theme\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    style: [{\n      borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,\n    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,\n    delayLongPress: delayLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID,\n    theme: theme\n  }, React.createElement(View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected && showSelectedCheck ? React.createElement(View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18,\n    theme: theme\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative'\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    width: '100%'\n  }\n});\nexport default Chip;","map":{"version":3,"names":["React","Animated","Platform","StyleSheet","TouchableWithoutFeedback","View","useLatestCallback","getChipColors","useInternalTheme","white","hasTouchHandler","Icon","MaterialCommunityIcon","Surface","TouchableRipple","Text","Chip","_ref","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onPressOut","onPressIn","delayLongPress","onClose","closeIcon","textStyle","style","theme","themeOverrides","testID","selectedColor","rippleColor","customRippleColor","showSelectedOverlay","showSelectedCheck","ellipsizeMode","compact","elevated","rest","_objectWithoutPropertiesLoose","_excluded","isV3","current","elevation","useRef","Value","hasPassedTouchHandler","isOutlined","handlePressIn","e","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","opacity","defaultBorderRadius","iconSize","backgroundColor","customBackgroundColor","borderRadius","flatten","borderColor","textColor","iconColor","selectedBackgroundColor","accessibilityState","elevationStyle","OS","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","Object","assign","color","fonts","labelLarge","regular","createElement","_extends","styles","container","md3OutlineContainer","md3FlatContainer","borderless","touchable","undefined","accessibilityRole","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","source","colors","primary","size","name","direction","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["C:\\Users\\user\\Desktop\\projet perso\\La Fons'Dal\\LFD\\LFD\\node_modules\\react-native-paper\\src\\components\\Chip\\Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport { getChipColors } from './helpers';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $Omit, EllipsizeProp, ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   * Note: With theme version 3 `selectedColor` doesn't apply to the `icon`.\n   *       If you want specify custom color for the `icon`, render your own `Icon` component.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether to display default check icon on selected chip.\n   * Note: Check will not be shown if `icon` is specified. If specified, `icon` will be shown regardless of `selected`.\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips are compact elements that can represent inputs, attributes, or actions.\n * They can have an icon or avatar on the left, and a close button icon on the right.\n * They are typically used to:\n * <ul>\n *  <li>Present multiple options </li>\n *  <li>Represent attributes active or chosen </li>\n *  <li>Present filter options </li>\n *  <li>Trigger actions related to primary content </li>\n * </ul>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onPressOut,\n  onPressIn,\n  delayLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme: themeOverrides,\n  testID = 'chip',\n  selectedColor,\n  rippleColor: customRippleColor,\n  showSelectedOverlay = false,\n  showSelectedCheck = true,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressIn?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  });\n\n  const handlePressOut = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressOut?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  });\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    rippleColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n    customRippleColor,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft:\n      avatar || icon || (selected && showSelectedCheck)\n        ? 4 * multiplier\n        : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={[\n        styles.container,\n        isV3 &&\n          (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n        !theme.isV3 && {\n          elevation: elevationStyle,\n        },\n        {\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor,\n          borderRadius,\n        },\n        style,\n      ]}\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n      testID={`${testID}-container`}\n      theme={theme}\n    >\n      <TouchableRipple\n        borderless\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        delayLongPress={delayLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n        theme={theme}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || (selected && showSelectedCheck) ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                  theme={theme}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    width: '100%',\n  },\n});\n\nexport default Chip;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,QAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,wBAAA;AAAA,OAAAC,IAAA;AAe9B,OAAOC,iBAAiB,MAAM,qBAAqB;AAEnD,SAASC,aAAa,QAAQ,WAAW;AACzC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,KAAK,QAAQ,+BAA+B;AAErD,OAAOC,eAAe,MAAM,6BAA6B;AAEzD,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,qBAAqB,MAAM,0BAA0B;AAC5D,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,eAAe,MAAM,oCAAoC;AAChE,OAAOC,IAAI,MAAM,oBAAoB;AAyIrC,MAAMC,IAAI,GAAGC,IAAA,IA4BA;EAAA,IA5BC;MACZC,IAAI,GAAG,MAAM;MACbC,QAAQ;MACRC,IAAI;MACJC,MAAM;MACNC,QAAQ,GAAG,KAAK;MAChBC,QAAQ,GAAG,KAAK;MAChBC,kBAAkB;MAClBC,2BAA2B,GAAG,OAAO;MACrCC,OAAO;MACPC,WAAW;MACXC,UAAU;MACVC,SAAS;MACTC,cAAc;MACdC,OAAO;MACPC,SAAS;MACTC,SAAS;MACTC,KAAK;MACLC,KAAK,EAAEC,cAAc;MACrBC,MAAM,GAAG,MAAM;MACfC,aAAa;MACbC,WAAW,EAAEC,iBAAiB;MAC9BC,mBAAmB,GAAG,KAAK;MAC3BC,iBAAiB,GAAG,IAAI;MACxBC,aAAa;MACbC,OAAO;MACPC,QAAQ,GAAG;IAEN,CAAC,GAAA5B,IAAA;IADH6B,IAAA,GAAAC,6BAAA,CACG9B,IAAA,EAAA+B,SAAA;EACN,MAAMb,KAAK,GAAG3B,gBAAgB,CAAC4B,cAAc,CAAC;EAC9C,MAAM;IAAEa;EAAK,CAAC,GAAGd,KAAK;EAEtB,MAAM;IAAEe,OAAO,EAAEC;EAAU,CAAC,GAAGnD,KAAK,CAACoD,MAAM,CACzC,IAAInD,QAAQ,CAACoD,KAAK,CAACJ,IAAI,IAAIJ,QAAQ,GAAG,CAAC,GAAG,CAAC,CAC7C,CAAC;EAED,MAAMS,qBAAqB,GAAG5C,eAAe,CAAC;IAC5CgB,OAAO;IACPC,WAAW;IACXE,SAAS;IACTD;EACF,CAAC,CAAC;EAEF,MAAM2B,UAAU,GAAGrC,IAAI,KAAK,UAAU;EAEtC,MAAMsC,aAAa,GAAGlD,iBAAiB,CAAEmD,CAAwB,IAAK;IACpE,MAAM;MAAEC;IAAM,CAAC,GAAGvB,KAAK,CAACwB,SAAS;IACjC9B,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG4B,CAAC,CAAC;IACdxD,QAAQ,CAAC2D,MAAM,CAACT,SAAS,EAAE;MACzBU,OAAO,EAAEZ,IAAI,GAAIJ,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAI,CAAC;MACtCiB,QAAQ,EAAE,GAAG,GAAGJ,KAAK;MACrBK,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACZ,CAAC,CAAC;EAEF,MAAMC,cAAc,GAAG3D,iBAAiB,CAAEmD,CAAwB,IAAK;IACrE,MAAM;MAAEC;IAAM,CAAC,GAAGvB,KAAK,CAACwB,SAAS;IACjC/B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG6B,CAAC,CAAC;IACfxD,QAAQ,CAAC2D,MAAM,CAACT,SAAS,EAAE;MACzBU,OAAO,EAAEZ,IAAI,IAAIJ,QAAQ,GAAG,CAAC,GAAG,CAAC;MACjCiB,QAAQ,EAAE,GAAG,GAAGJ,KAAK;MACrBK,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACZ,CAAC,CAAC;EAEF,MAAME,OAAO,GAAGjB,IAAI,GAAG,IAAI,GAAG,IAAI;EAClC,MAAMkB,mBAAmB,GAAGlB,IAAI,GAAG,CAAC,GAAG,EAAE;EACzC,MAAMmB,QAAQ,GAAGnB,IAAI,GAAG,EAAE,GAAG,EAAE;EAE/B,MAAM;IACJoB,eAAe,EAAEC,qBAAqB;IACtCC,YAAY,GAAGJ;EACjB,CAAC,GAAIhE,UAAU,CAACqE,OAAO,CAACtC,KAAK,CAAC,IAAI,CAAC,CAAe;EAElD,MAAM;IACJuC,WAAW;IACXC,SAAS;IACTC,SAAS;IACTpC,WAAW;IACXqC,uBAAuB;IACvBP;EACF,CAAC,GAAG9D,aAAa,CAAC;IAChBgD,UAAU;IACVpB,KAAK;IACLG,aAAa;IACbG,mBAAmB;IACnB6B,qBAAqB;IACrB/C,QAAQ;IACRiB;EACF,CAAC,CAAC;EAEF,MAAMqC,kBAAsC,GAAG;IAC7CvD,QAAQ;IACRC;EACF,CAAC;EAED,MAAMuD,cAAc,GAAG7B,IAAI,IAAI/C,QAAQ,CAAC6E,EAAE,KAAK,SAAS,GAAG5B,SAAS,GAAG,CAAC;EACxE,MAAM6B,UAAU,GAAG/B,IAAI,GAAIL,OAAO,GAAG,GAAG,GAAG,CAAC,GAAI,CAAC;EACjD,MAAMqC,aAAa,GAAG;IACpBC,WAAW,EAAEnD,OAAO,GAAG,CAAC,GAAG,CAAC,GAAGiD,UAAU;IACzCG,UAAU,EACR9D,MAAM,IAAID,IAAI,IAAKE,QAAQ,IAAIoB,iBAAkB,GAC7C,CAAC,GAAGsC,UAAU,GACd,CAAC,GAAGA;EACZ,CAAC;EACD,MAAMI,eAAe,GAAG;IACtBC,YAAY,EAAEpC,IAAI,GAAIlB,OAAO,GAAG,EAAE,GAAG,CAAC,GAAIA,OAAO,GAAG,EAAE,GAAG;EAC3D,CAAC;EACD,MAAMuD,cAAc,GAAAC,MAAA,CAAAC,MAAA;IAClBC,KAAK,EAAEf;EAAS,GACZzB,IAAI,GAAGd,KAAK,CAACuD,KAAK,CAACC,UAAU,GAAGxD,KAAK,CAACuD,KAAK,CAACE,OAAO,CACxD;EACD,OACE5F,KAAA,CAAA6F,aAAA,CAAChF,OAAO,EAAAiF,QAAA;IACN5D,KAAK,EAAE,CACL6D,MAAM,CAACC,SAAS,EAChB/C,IAAI,KACDM,UAAU,GAAGwC,MAAM,CAACE,mBAAmB,GAAGF,MAAM,CAACG,gBAAgB,CAAC,EACrE,CAAC/D,KAAK,CAACc,IAAI,IAAI;MACbE,SAAS,EAAE2B;IACb,CAAC,EACD;MACET,eAAe,EAAE/C,QAAQ,GAAGsD,uBAAuB,GAAGP,eAAe;MACrEI,WAAW;MACXF;IACF,CAAC,EACDrC,KAAK;EACL,GACGC,KAAK,CAACc,IAAI,IAAI;IAAEE,SAAS,EAAE2B;EAAe,CAAC,EAC5ChC,IAAI;IACRT,MAAM,EAAG,GAAEA,MAAO,YAAY;IAC9BF,KAAK,EAAEA;EAAM,IAEbnC,KAAA,CAAA6F,aAAA,CAAC/E,eAAe;IACdqF,UAAU;IACVjE,KAAK,EAAE,CAAC;MAAEqC;IAAa,CAAC,EAAEwB,MAAM,CAACK,SAAS,CAAE;IAC5C1E,OAAO,EAAEA,OAAQ;IACjBC,WAAW,EAAEA,WAAY;IACzBE,SAAS,EAAEyB,qBAAqB,GAAGE,aAAa,GAAG6C,SAAU;IAC7DzE,UAAU,EAAE0B,qBAAqB,GAAGW,cAAc,GAAGoC,SAAU;IAC/DvE,cAAc,EAAEA,cAAe;IAC/BS,WAAW,EAAEA,WAAY;IACzBhB,QAAQ,EAAEA,QAAS;IACnBC,kBAAkB,EAAEA,kBAAmB;IACvC8E,iBAAiB,EAAC,QAAQ;IAC1BzB,kBAAkB,EAAEA,kBAAmB;IACvCxC,MAAM,EAAEA,MAAO;IACfF,KAAK,EAAEA;EAAM,GAEbnC,KAAA,CAAA6F,aAAA,CAACxF,IAAI;IACH6B,KAAK,EAAE,CAAC6D,MAAM,CAACQ,OAAO,EAAEtD,IAAI,IAAI8C,MAAM,CAACS,UAAU,EAAEpB,eAAe;EAAE,GAEnE/D,MAAM,IAAI,CAACD,IAAI,GACdpB,KAAA,CAAA6F,aAAA,CAACxF,IAAI;IACH6B,KAAK,EAAE,CACL6D,MAAM,CAACU,aAAa,EACpBxD,IAAI,IAAI8C,MAAM,CAACW,gBAAgB,EAC/BnF,QAAQ,IAAI;MAAE2C;IAAQ,CAAC;EACvB,GAEDlE,KAAK,CAAC2G,cAAc,CAACtF,MAAM,CAAC,GACzBrB,KAAK,CAAC4G,YAAY,CAACvF,MAAM,EAA6B;IACpDa,KAAK,EAAE,CAAC6D,MAAM,CAAC1E,MAAM,EAAEA,MAAM,CAACwF,KAAK,CAAC3E,KAAK;EAC3C,CAAC,CAAC,GACFb,MACA,CAAC,GACL,IAAI,EACPD,IAAI,IAAKE,QAAQ,IAAIoB,iBAAkB,GACtC1C,KAAA,CAAA6F,aAAA,CAACxF,IAAI;IACH6B,KAAK,EAAE,CACL6D,MAAM,CAAC3E,IAAI,EACX6B,IAAI,IAAI8C,MAAM,CAACe,OAAO,EACtBzF,MAAM,GACF,CACE0E,MAAM,CAAC1E,MAAM,EACb0E,MAAM,CAACgB,cAAc,EACrB9D,IAAI,IAAI3B,QAAQ,IAAIyE,MAAM,CAACiB,eAAe,CAC3C,GACD,IAAI;EACR,GAED5F,IAAI,GACHpB,KAAA,CAAA6F,aAAA,CAAClF,IAAI;IACHsG,MAAM,EAAE7F,IAAK;IACbqE,KAAK,EACHpE,MAAM,GACFZ,KAAK,GACL,CAACc,QAAQ,IAAIY,KAAK,CAACc,IAAI,GACvBd,KAAK,CAAC+E,MAAM,CAACC,OAAO,GACpBxC,SACL;IACDyC,IAAI,EAAE,EAAG;IACTjF,KAAK,EAAEA;EAAM,CACd,CAAC,GAEFnC,KAAA,CAAA6F,aAAA,CAACjF,qBAAqB;IACpByG,IAAI,EAAC,OAAO;IACZ5B,KAAK,EAAEpE,MAAM,GAAGZ,KAAK,GAAGkE,SAAU;IAClCyC,IAAI,EAAE,EAAG;IACTE,SAAS,EAAC;EAAK,CAChB,CAEC,CAAC,GACL,IAAI,EACRtH,KAAA,CAAA6F,aAAA,CAAC9E,IAAI;IACHwG,OAAO,EAAC,YAAY;IACpBC,UAAU,EAAE,KAAM;IAClBC,aAAa,EAAE,CAAE;IACjBvF,KAAK,EAAE,CACLe,IAAI,GAAG8C,MAAM,CAAC2B,YAAY,GAAG3B,MAAM,CAAC4B,SAAS,EAC7CrC,cAAc,EACdL,aAAa,EACbhD,SAAS,CACT;IACFU,aAAa,EAAEA;EAAc,GAE5BxB,QACG,CACF,CACS,CAAC,EACjBY,OAAO,GACN/B,KAAA,CAAA6F,aAAA,CAACxF,IAAI;IAAC6B,KAAK,EAAE6D,MAAM,CAAC6B;EAAiB,GACnC5H,KAAA,CAAA6F,aAAA,CAACzF,wBAAwB;IACvBsB,OAAO,EAAEK,OAAQ;IACjBuE,iBAAiB,EAAC,QAAQ;IAC1B9E,kBAAkB,EAAEC;EAA4B,GAEhDzB,KAAA,CAAA6F,aAAA,CAACxF,IAAI;IACH6B,KAAK,EAAE,CACL6D,MAAM,CAAC3E,IAAI,EACX2E,MAAM,CAAC/D,SAAS,EAChBiB,IAAI,IAAI8C,MAAM,CAAC8B,YAAY;EAC3B,GAED7F,SAAS,GACRhC,KAAA,CAAA6F,aAAA,CAAClF,IAAI;IAACsG,MAAM,EAAEjF,SAAU;IAACyD,KAAK,EAAEd,SAAU;IAACyC,IAAI,EAAEhD;EAAS,CAAE,CAAC,GAE7DpE,KAAA,CAAA6F,aAAA,CAACjF,qBAAqB;IACpByG,IAAI,EAAEpE,IAAI,GAAG,OAAO,GAAG,cAAe;IACtCmE,IAAI,EAAEhD,QAAS;IACfqB,KAAK,EAAEd,SAAU;IACjB2C,SAAS,EAAC;EAAK,CAChB,CAEC,CACkB,CACtB,CAAC,GACL,IACG,CAAC;AAEd,CAAC;AAED,MAAMvB,MAAM,GAAG5F,UAAU,CAAC2H,MAAM,CAAC;EAC/B9B,SAAS,EAAE;IACT+B,WAAW,EAAE5H,UAAU,CAAC6H,aAAa;IACrCC,WAAW,EAAE,OAAO;IACpBC,aAAa,EAAEhI,QAAQ,CAACiI,MAAM,CAAC;MAAEC,OAAO,EAAE,QAAQ;MAAEC,GAAG,EAAE;IAAM,CAAC;EAClE,CAAC;EACDpC,mBAAmB,EAAE;IACnB8B,WAAW,EAAE;EACf,CAAC;EACD7B,gBAAgB,EAAE;IAChB6B,WAAW,EAAE;EACf,CAAC;EACDxB,OAAO,EAAE;IACP2B,aAAa,EAAE,KAAK;IACpBI,UAAU,EAAE,QAAQ;IACpBC,WAAW,EAAE,CAAC;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDhC,UAAU,EAAE;IACV+B,WAAW,EAAE;EACf,CAAC;EACDnH,IAAI,EAAE;IACJqH,OAAO,EAAE,CAAC;IACVC,SAAS,EAAE;EACb,CAAC;EACD5B,OAAO,EAAE;IACPyB,WAAW,EAAE,CAAC;IACdlD,YAAY,EAAE;EAChB,CAAC;EACDrD,SAAS,EAAE;IACTkD,WAAW,EAAE;EACf,CAAC;EACD2C,YAAY,EAAE;IACZ3C,WAAW,EAAE,CAAC;IACduD,OAAO,EAAE;EACX,CAAC;EACDd,SAAS,EAAE;IACTgB,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,EAAE;IACdC,iBAAiB,EAAE,QAAQ;IAC3BC,cAAc,EAAE;EAClB,CAAC;EACDpB,YAAY,EAAE;IACZmB,iBAAiB,EAAE,QAAQ;IAC3BC,cAAc,EAAE;EAClB,CAAC;EACDzH,MAAM,EAAE;IACN0H,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVzE,YAAY,EAAE;EAChB,CAAC;EACDkC,aAAa,EAAE;IACbvB,WAAW,EAAE;EACf,CAAC;EACDwB,gBAAgB,EAAE;IAChBvB,UAAU,EAAE,CAAC;IACbD,WAAW,EAAE;EACf,CAAC;EACD8B,eAAe,EAAE;IACfuB,WAAW,EAAE;EACf,CAAC;EAEDxB,cAAc,EAAE;IACdyB,QAAQ,EAAE,UAAU;IACpBS,GAAG,EAAE,CAAC;IACNC,IAAI,EAAE,CAAC;IACP7E,eAAe,EAAE;EACnB,CAAC;EACDuD,gBAAgB,EAAE;IAChBY,QAAQ,EAAE,UAAU;IACpBW,KAAK,EAAE,CAAC;IACRH,MAAM,EAAE,MAAM;IACdI,cAAc,EAAE,QAAQ;IACxBd,UAAU,EAAE;EACd,CAAC;EACDlC,SAAS,EAAE;IACT2C,KAAK,EAAE;EACT;AACF,CAAC,CAAC;AAEF,eAAe/H,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}